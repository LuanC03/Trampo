/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 04:06:27 GMT 2018
 */

package br.com.ufcg.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.ufcg.controller.EspecialidadeController;
import br.com.ufcg.domain.Especialidade;
import br.com.ufcg.service.EspecialidadeService;
import br.com.ufcg.util.response.Response;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EspecialidadeController_ESTest extends EspecialidadeController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EspecialidadeController especialidadeController0 = new EspecialidadeController();
      EspecialidadeService especialidadeService0 = mock(EspecialidadeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeController0, (Class<?>) EspecialidadeController.class, "especialidadeService", (Object) especialidadeService0);
      Injector.validateBean(especialidadeController0, (Class<?>) EspecialidadeController.class);
      EspecialidadeService especialidadeService1 = especialidadeController0.especialidadeService;
      especialidadeController0.especialidadeService = especialidadeService1;
      especialidadeController0.especialidadeService = especialidadeService1;
      especialidadeController0.especialidadeService = null;
      Especialidade especialidade0 = mock(Especialidade.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Response> responseEntity0 = especialidadeController0.cadastraEspecialidade(especialidade0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EspecialidadeController especialidadeController0 = new EspecialidadeController();
      EspecialidadeService especialidadeService0 = mock(EspecialidadeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeController0, (Class<?>) EspecialidadeController.class, "especialidadeService", (Object) especialidadeService0);
      Injector.validateBean(especialidadeController0, (Class<?>) EspecialidadeController.class);
      EspecialidadeService especialidadeService1 = especialidadeController0.especialidadeService;
      especialidadeController0.especialidadeService = especialidadeService1;
      especialidadeController0.especialidadeService = especialidadeService1;
      especialidadeController0.especialidadeService = null;
      // Undeclared exception!
      try { 
        especialidadeController0.listaEspecialidades();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.controller.EspecialidadeController", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EspecialidadeController especialidadeController0 = new EspecialidadeController();
      EspecialidadeService especialidadeService0 = mock(EspecialidadeService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(especialidadeService0).getEspecialidades();
      Injector.inject(especialidadeController0, (Class<?>) EspecialidadeController.class, "especialidadeService", (Object) especialidadeService0);
      Injector.validateBean(especialidadeController0, (Class<?>) EspecialidadeController.class);
      List<Especialidade> list0 = especialidadeController0.listaEspecialidades();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EspecialidadeController especialidadeController0 = new EspecialidadeController();
      EspecialidadeService especialidadeService0 = mock(EspecialidadeService.class, new ViolatedAssumptionAnswer());
      doReturn((Especialidade) null).when(especialidadeService0).criarEspecialidade(any(br.com.ufcg.domain.Especialidade.class));
      Injector.inject(especialidadeController0, (Class<?>) EspecialidadeController.class, "especialidadeService", (Object) especialidadeService0);
      Injector.validateBean(especialidadeController0, (Class<?>) EspecialidadeController.class);
      Especialidade especialidade0 = mock(Especialidade.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Response> responseEntity0 = especialidadeController0.cadastraEspecialidade(especialidade0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }
}
