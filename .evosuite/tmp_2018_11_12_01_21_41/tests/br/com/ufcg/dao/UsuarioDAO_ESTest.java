/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 03:54:48 GMT 2018
 */

package br.com.ufcg.dao;

import org.junit.Test;
import static org.junit.Assert.*;
import br.com.ufcg.dao.ClienteDAO;
import br.com.ufcg.dao.FornecedorDAO;
import br.com.ufcg.domain.Especialidade;
import br.com.ufcg.domain.enums.TipoUsuario;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsuarioDAO_ESTest extends UsuarioDAO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = Long.valueOf((-2345L));
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, (String) null, (String) null, (String) null, (String) null, (TipoUsuario) null, linkedList0);
      fornecedorDAO0.getTipo();
      assertEquals((-2345L), (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = new Long((-199L));
      TipoUsuario tipoUsuario0 = TipoUsuario.CLIENTE;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "gZ2* Z,y@x]KJ", "gZ2* Z,y@x]KJ", "gZ2* Z,y@x]KJ", "gZ2* Z,y@x]KJ", tipoUsuario0, linkedList0);
      fornecedorDAO0.getNomeCompleto();
      assertEquals((-199L), (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = new Long((-3283L));
      TipoUsuario tipoUsuario0 = TipoUsuario.CLIENTE;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "", "", "", "", tipoUsuario0, linkedList0);
      fornecedorDAO0.getNomeCompleto();
      assertEquals((-3283L), (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = Long.getLong("A~wm7d}=", 0L);
      TipoUsuario tipoUsuario0 = TipoUsuario.CLIENTE;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, (String) null, ", Email: ", ", Email: ", (String) null, tipoUsuario0, linkedList0);
      fornecedorDAO0.setLogin(", Email: ");
      String string0 = fornecedorDAO0.getLogin();
      assertEquals(", Email: ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(0L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      ClienteDAO clienteDAO0 = new ClienteDAO(long0, "", "aj[C3T:BmR", ", Nome: ", "E\"", tipoUsuario0);
      String string0 = clienteDAO0.getLogin();
      assertEquals("E\"", clienteDAO0.getFotoPerfil());
      assertEquals(", Nome: ", clienteDAO0.getEmail());
      assertEquals("", string0);
      assertEquals("aj[C3T:BmR", clienteDAO0.getNomeCompleto());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Long long0 = new Long(0L);
      TipoUsuario tipoUsuario0 = TipoUsuario.CLIENTE;
      ClienteDAO clienteDAO0 = new ClienteDAO(long0, "OvI$6tBPh", "br.com.ufcg.dao.UsuarioDAO", "OvI$6tBPh", "br.com.ufcg.dao.UsuarioDAO", tipoUsuario0);
      clienteDAO0.getId();
      assertEquals("br.com.ufcg.dao.UsuarioDAO", clienteDAO0.getFotoPerfil());
      assertEquals("OvI$6tBPh", clienteDAO0.getLogin());
      assertEquals("br.com.ufcg.dao.UsuarioDAO", clienteDAO0.getNomeCompleto());
      assertEquals("OvI$6tBPh", clienteDAO0.getEmail());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long((-2782L));
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      ClienteDAO clienteDAO0 = new ClienteDAO(long0, "[KqYPSa,%", "[KqYPSa,%", "[KqYPSa,%", "[KqYPSa,%", tipoUsuario0);
      Long long1 = clienteDAO0.getId();
      assertEquals((-2782L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = Long.getLong("A~wm7d}=", 0L);
      TipoUsuario tipoUsuario0 = TipoUsuario.CLIENTE;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, (String) null, ", Email: ", ", Email: ", (String) null, tipoUsuario0, linkedList0);
      String string0 = fornecedorDAO0.getFotoPerfil();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long((-3283L));
      TipoUsuario tipoUsuario0 = TipoUsuario.CLIENTE;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "", "", "", "", tipoUsuario0, linkedList0);
      fornecedorDAO0.getFotoPerfil();
      assertEquals((-3283L), (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long((-199L));
      TipoUsuario tipoUsuario0 = TipoUsuario.CLIENTE;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "gZ2* Z,y@x]KJ", "gZ2* Z,y@x]KJ", "gZ2* Z,y@x]KJ", "gZ2* Z,y@x]KJ", tipoUsuario0, linkedList0);
      fornecedorDAO0.getEmail();
      assertEquals((-199L), (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long((-2887L));
      TipoUsuario tipoUsuario0 = TipoUsuario.CLIENTE;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "x01.GB", "26&{Jq^p9jj", "", (String) null, tipoUsuario0, linkedList0);
      String string0 = fornecedorDAO0.getEmail();
      assertEquals("26&{Jq^p9jj", fornecedorDAO0.getNomeCompleto());
      assertNotNull(string0);
      assertEquals((-2887L), (long)fornecedorDAO0.getId());
      assertEquals("", string0);
      assertEquals("x01.GB", fornecedorDAO0.getLogin());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(226L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      ClienteDAO clienteDAO0 = new ClienteDAO(long0, (String) null, (String) null, (String) null, (String) null, tipoUsuario0);
      boolean boolean0 = clienteDAO0.equals(long0);
      assertEquals(226L, (long)clienteDAO0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Long long0 = new Long(226L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, (String) null, (String) null, (String) null, (String) null, tipoUsuario0, linkedList0);
      linkedList0.offer((Especialidade) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fornecedorDAO0);
      boolean boolean0 = linkedList0.removeIf(predicate0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Long long0 = new Long((-2575L));
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, (String) null, (String) null, (String) null, (String) null, tipoUsuario0, linkedList0);
      boolean boolean0 = fornecedorDAO0.equals(fornecedorDAO0);
      assertTrue(boolean0);
      assertEquals((-2575L), (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(364L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "", "", "", "", tipoUsuario0, (List<Especialidade>) null);
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO1 = new FornecedorDAO(long0, "", "", "", "", tipoUsuario0, linkedList0);
      fornecedorDAO1.setId(18L);
      boolean boolean0 = fornecedorDAO0.equals(fornecedorDAO1);
      assertEquals(18L, (long)fornecedorDAO1.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Long long0 = new Long((-2575L));
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, (String) null, (String) null, (String) null, (String) null, tipoUsuario0, linkedList0);
      fornecedorDAO0.hashCode();
      assertEquals((-2575L), (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long(226L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      ClienteDAO clienteDAO0 = new ClienteDAO(long0, (String) null, (String) null, (String) null, (String) null, tipoUsuario0);
      clienteDAO0.setFotoPerfil("226");
      assertEquals(226L, (long)clienteDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TipoUsuario tipoUsuario0 = TipoUsuario.CLIENTE;
      Long long0 = new Long(405L);
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "", "", "", "", tipoUsuario0, (List<Especialidade>) null);
      Long long1 = fornecedorDAO0.getId();
      assertEquals(405L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = new Long(226L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, (String) null, (String) null, (String) null, (String) null, tipoUsuario0, linkedList0);
      fornecedorDAO0.getLogin();
      assertEquals(226L, (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Long long0 = new Long(364L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "", "", "", "", tipoUsuario0, (List<Especialidade>) null);
      fornecedorDAO0.setTipo(tipoUsuario0);
      assertEquals(364L, (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Long long0 = new Long((-2575L));
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, (String) null, (String) null, (String) null, (String) null, tipoUsuario0, linkedList0);
      TipoUsuario tipoUsuario1 = fornecedorDAO0.getTipo();
      FornecedorDAO fornecedorDAO1 = new FornecedorDAO(long0, (String) null, (String) null, "Usuario -2575 - Login: null, Nome: null, Email: null.\r\n", "Usuario -2575 - Login: null, Nome: null, Email: null.\r\n", tipoUsuario1, linkedList0);
      boolean boolean0 = fornecedorDAO0.equals(fornecedorDAO1);
      assertTrue(boolean0);
      assertEquals((-2575L), (long)fornecedorDAO1.getId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Long long0 = new Long(226L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      ClienteDAO clienteDAO0 = new ClienteDAO(long0, (String) null, (String) null, (String) null, (String) null, tipoUsuario0);
      clienteDAO0.getNomeCompleto();
      assertEquals(226L, (long)clienteDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Long long0 = new Long(807L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "r.com.fcC.daocsarioDAO", "r.com.fcC.daocsarioDAO", "r.com.fcC.daocsarioDAO", "r.com.fcC.daocsarioDAO", tipoUsuario0, linkedList0);
      fornecedorDAO0.getFotoPerfil();
      assertEquals(807L, (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Long long0 = new Long(226L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      ClienteDAO clienteDAO0 = new ClienteDAO(long0, (String) null, (String) null, (String) null, (String) null, tipoUsuario0);
      clienteDAO0.getEmail();
      assertEquals(226L, (long)clienteDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Long long0 = new Long((-2575L));
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, (String) null, (String) null, (String) null, (String) null, tipoUsuario0, linkedList0);
      String string0 = fornecedorDAO0.toString();
      assertEquals("Usuario -2575 - Login: null, Nome: null, Email: null.\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Long long0 = new Long(364L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "", "", "", "", tipoUsuario0, (List<Especialidade>) null);
      fornecedorDAO0.setEmail("");
      assertEquals(364L, (long)fornecedorDAO0.getId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Long long0 = new Long(364L);
      TipoUsuario tipoUsuario0 = TipoUsuario.FORNECEDOR;
      FornecedorDAO fornecedorDAO0 = new FornecedorDAO(long0, "", "", "", "", tipoUsuario0, (List<Especialidade>) null);
      fornecedorDAO0.setNomeCompleto("");
      assertEquals(364L, (long)fornecedorDAO0.getId());
  }
}
