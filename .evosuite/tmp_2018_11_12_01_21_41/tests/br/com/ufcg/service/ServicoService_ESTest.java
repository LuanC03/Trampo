/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 03:40:22 GMT 2018
 */

package br.com.ufcg.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.ufcg.dao.ServicoDAO;
import br.com.ufcg.domain.Cliente;
import br.com.ufcg.domain.Endereco;
import br.com.ufcg.domain.Especialidade;
import br.com.ufcg.domain.Fornecedor;
import br.com.ufcg.domain.Servico;
import br.com.ufcg.domain.enums.TipoStatus;
import br.com.ufcg.repository.ServicoRepository;
import br.com.ufcg.service.ServicoService;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServicoService_ESTest extends ServicoService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      ArrayList<Servico> arrayList0 = new ArrayList<Servico>();
      Servico servico0 = new Servico();
      arrayList0.add((Servico) null);
      arrayList0.add(servico0);
      // Undeclared exception!
      try { 
        servicoService0.ordenaServicosPorData(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      TipoStatus tipoStatus0 = TipoStatus.ACEITO;
      servico0.setStatus(tipoStatus0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(servico0).when(servicoRepository0).findByID(anyLong());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      servicoService0.checarStatus(servico0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      servicoService0.getServicoByID(1270L);
      Fornecedor fornecedor0 = new Fornecedor();
      Long long0 = new Long(3384L);
      Long.max(0L, (-3541L));
      Long.min(519L, 0L);
      servicoService0.servicoEstaAceito(servico0);
      ServicoService servicoService1 = new ServicoService();
      ServicoRepository servicoRepository1 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(servicoRepository1).findServicosCliente(any(br.com.ufcg.domain.Cliente.class));
      Injector.inject(servicoService1, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository1);
      Injector.validateBean(servicoService1, (Class<?>) ServicoService.class);
      List<Servico> list0 = servicoService1.getServicosCliente((Cliente) null);
      // Undeclared exception!
      try { 
        servicoService0.setServicosToDAO(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(servico0).when(servicoRepository0).findServico(any(java.time.LocalDate.class) , any(java.time.LocalTime.class) , any(br.com.ufcg.domain.Cliente.class) , anyString());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1342L);
      Endereco endereco0 = new Endereco();
      Servico servico1 = new Servico("BN<", "BN<", (LocalDate) null, localTime0, (BigDecimal) null, endereco0);
      // Undeclared exception!
      try { 
        servicoService0.getServico(servico1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.dao.ServicoDAO", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Cliente cliente0 = new Cliente("!:K@F0 u@R@-H@^0i9p", "", "", "", "!:K@F0 u@R@-H@^0i9p");
      Servico servico0 = new Servico();
      try { 
        servicoService0.criarServico(cliente0, servico0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.util.validadores.ServicoValidador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      linkedList0.add((Servico) null);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      List<Servico> list0 = servicoService0.getServicosEvolvidosFornecedor(fornecedor0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Vector<Servico> vector0 = new Vector<Servico>();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      List<Servico> list0 = servicoService0.getServicosEvolvidosFornecedor(fornecedor0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Vector<Servico> vector0 = new Vector<Servico>();
      Servico servico0 = new Servico();
      vector0.add(servico0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("br.com.ufcg.dao.ClienteDAO", "pv5q{", "pv5q{", "br.com.ufcg.dao.ClienteDAO", "br.com.ufcg.dao.ClienteDAO", arrayList0);
      List<Servico> list0 = servicoService0.getServicosDoFornecedor(fornecedor0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      linkedList0.add((Servico) null);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findServicosCliente(any(br.com.ufcg.domain.Cliente.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Cliente cliente0 = new Cliente();
      List<Servico> list0 = servicoService0.getServicosCliente(cliente0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Stack<Servico> stack0 = new Stack<Servico>();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(servicoRepository0).findServicosCliente(any(br.com.ufcg.domain.Cliente.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Cliente cliente0 = new Cliente();
      List<Servico> list0 = servicoService0.getServicosCliente(cliente0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(servico0).when(servicoRepository0).findByID(anyLong());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      servico0.setFornecedorAvaliou(true);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico1 = servicoService0.getServicoByID(1270L);
      assertFalse(servico1.isClienteAvaliou());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      servico0.setClienteAvaliou(true);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(servico0).when(servicoRepository0).findByID(anyLong());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico1 = servicoService0.getServicoByID((-2128L));
      assertTrue(servico1.isClienteAvaliou());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(servicoRepository0).findAll();
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      List<Servico> list0 = servicoService0.getAll();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Vector<Servico> vector0 = new Vector<Servico>();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(servicoRepository0).findAll();
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      List<Servico> list0 = servicoService0.getAll();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Vector<Servico> vector0 = new Vector<Servico>();
      Servico servico0 = new Servico();
      vector0.add(servico0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(servicoRepository0).findAll();
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      List<Servico> list0 = servicoService0.getAll();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      try { 
        servicoService0.servicoEstaAceito((Servico) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      Fornecedor fornecedor0 = new Fornecedor();
      try { 
        servicoService0.servicoEhValidoParaFornecedor(servico0, fornecedor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      ArrayList<Servico> arrayList0 = new ArrayList<Servico>();
      arrayList0.add((Servico) null);
      // Undeclared exception!
      try { 
        servicoService0.ordenaServicosPorData(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      String string0 = "";
      LocalDate localDate0 = null;
      MockLocalTime.now();
      long long0 = 0L;
      Fornecedor fornecedor0 = new Fornecedor();
      // Undeclared exception!
      try { 
        servicoService0.getServicosEvolvidosFornecedor(fornecedor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Servico>) null).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("", "", "", "", "", linkedList0);
      try { 
        servicoService0.getServicosDoFornecedor(fornecedor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      servicoService0.servicoRepository = null;
      Cliente cliente0 = new Cliente("}+<aKSc+", "}+<aKSc+", ".eOiWjQ[n%K", "}+<aKSc+", "Type to check against must not be null");
      // Undeclared exception!
      try { 
        servicoService0.getServicosCliente(cliente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      String string0 = "";
      LocalDate localDate0 = null;
      MockLocalTime.ofSecondOfDay(0L);
      // Undeclared exception!
      try { 
        servicoService0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      // Undeclared exception!
      try { 
        servicoService0.checarStatus(servico0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      // Undeclared exception!
      try { 
        servicoService0.checarFornecedor((Servico) null, fornecedor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      Cliente cliente0 = new Cliente();
      // Undeclared exception!
      try { 
        servicoService0.checarCliente(servico0, cliente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      Servico servico0 = new Servico();
      TipoStatus tipoStatus0 = TipoStatus.ACEITO;
      servico0.setStatus(tipoStatus0);
      linkedList0.add((Servico) null);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      boolean boolean0 = servicoService0.checarServicoFornecedor(servico0, fornecedor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      Servico servico0 = new Servico();
      linkedList0.add((Servico) null);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      try { 
        servicoService0.checarServicoFornecedor(servico0, fornecedor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      TipoStatus tipoStatus0 = TipoStatus.CANCELADO;
      servico0.setStatus(tipoStatus0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      boolean boolean0 = servicoService0.checarStatus(servico0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      servico0.setTipo("sZP.Y(6f!^");
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      Especialidade especialidade0 = new Especialidade("sZP.Y(6f!^");
      arrayList0.add(especialidade0);
      fornecedor0.setListaEspecialidades(arrayList0);
      boolean boolean0 = servicoService0.servicoEhValidoParaFornecedor(servico0, fornecedor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      Especialidade especialidade0 = new Especialidade("sZP.Y(6f!^");
      arrayList0.add(especialidade0);
      fornecedor0.setListaEspecialidades(arrayList0);
      boolean boolean0 = servicoService0.servicoEhValidoParaFornecedor(servico0, fornecedor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      Cliente cliente0 = new Cliente();
      Long long0 = new Long((-576L));
      cliente0.setId(long0);
      servico0.setCliente(cliente0);
      Cliente cliente1 = new Cliente("", "", "", "", "");
      boolean boolean0 = servicoService0.checarCliente(servico0, cliente1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      TipoStatus tipoStatus0 = TipoStatus.CONCLUIDO;
      servico0.setStatus(tipoStatus0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      try { 
        servicoService0.servicoEstaAceito(servico0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Esse servico nao foi aceito!
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      Servico servico0 = new Servico();
      TipoStatus tipoStatus0 = TipoStatus.ACEITO;
      servico0.setStatus(tipoStatus0);
      linkedList0.add(servico0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      boolean boolean0 = servicoService0.checarServicoFornecedor(servico0, fornecedor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      Servico servico0 = new Servico();
      TipoStatus tipoStatus0 = TipoStatus.ACEITO;
      servico0.setStatus(tipoStatus0);
      linkedList0.add((Servico) null);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      try { 
        servicoService0.cancelarServicoFornecedor(servico0, fornecedor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Voc\u00EA s\u00F3 pode cancelar servi\u00E7os aceitos por voc\u00EA!
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      Servico servico0 = new Servico();
      linkedList0.add((Servico) null);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      try { 
        servicoService0.cancelarServicoFornecedor(servico0, fornecedor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      TipoStatus tipoStatus0 = TipoStatus.CONCLUIDO;
      servico0.setStatus(tipoStatus0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      servicoService0.checarStatus(servico0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      Especialidade especialidade0 = new Especialidade("sZP.Y(6fX!A^");
      arrayList0.add(especialidade0);
      fornecedor0.setListaEspecialidades(arrayList0);
      try { 
        servicoService0.setServicoParaFornecedor(servico0, fornecedor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Voc\u00EA n\u00E3o possui a especialidade requerida para o servi\u00E7o
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("", "", "", "", "", linkedList0);
      servico0.setFornecedor(fornecedor0);
      TipoStatus tipoStatus0 = TipoStatus.CANCELADO;
      servico0.setStatus(tipoStatus0);
      try { 
        servicoService0.concluirServico(servico0, fornecedor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // S\u00F3 \u00E9 poss\u00EDvel concluir servi\u00E7os que possuem status ACEITO!
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      Fornecedor fornecedor0 = new Fornecedor();
      try { 
        servicoService0.concluirServico(servico0, fornecedor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Voc\u00EA s\u00F3 pode concluir servi\u00E7os que voc\u00EA mesmo aceitou!
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("", "", "", "", "", linkedList0);
      servico0.setFornecedor(fornecedor0);
      try { 
        servicoService0.concluirServico(servico0, fornecedor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      Cliente cliente0 = new Cliente();
      TipoStatus tipoStatus0 = TipoStatus.CANCELADO;
      servico0.setStatus(tipoStatus0);
      servico0.setCliente(cliente0);
      try { 
        servicoService0.cancelarServicoCliente(servico0, cliente0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o \u00E9 possivel cancelar esse servi\u00E7o, pois ele j\u00E1 foi cancelado ou concluido!
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      Cliente cliente0 = new Cliente();
      servico0.setCliente(cliente0);
      try { 
        servicoService0.cancelarServicoCliente(servico0, cliente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("", "", "", "", "", linkedList0);
      servico0.setFornecedor(fornecedor0);
      Fornecedor fornecedor1 = new Fornecedor();
      Long long0 = new Long(1466L);
      fornecedor0.setId(long0);
      boolean boolean0 = servicoService0.checarFornecedor(servico0, fornecedor1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("", "", "", "", "", linkedList0);
      servico0.setFornecedor(fornecedor0);
      boolean boolean0 = servicoService0.checarFornecedor(servico0, fornecedor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      boolean boolean0 = servicoService0.checarFornecedor(servico0, fornecedor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      Cliente cliente0 = new Cliente();
      servico0.setCliente(cliente0);
      boolean boolean0 = servicoService0.checarCliente(servico0, cliente0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      Cliente cliente0 = new Cliente();
      Long long0 = new Long((-576L));
      cliente0.setId(long0);
      servico0.setCliente(cliente0);
      Cliente cliente1 = new Cliente("", "", "", "", "U.JsDS1d");
      try { 
        servicoService0.cancelarServicoCliente(servico0, cliente1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Voc\u00EA s\u00F3 pode cancelar servi\u00E7os que foram solicitados por voc\u00EA!
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      TipoStatus tipoStatus0 = TipoStatus.CANCELADO;
      servico0.setStatus(tipoStatus0);
      servico0.setTipo("sZP.Y(6f!^");
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      Especialidade especialidade0 = new Especialidade();
      especialidade0.setNome("sZP.Y(6f!^");
      arrayList0.add(especialidade0);
      fornecedor0.setListaEspecialidades(arrayList0);
      try { 
        servicoService0.setServicoParaFornecedor(servico0, fornecedor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Voc\u00EA s\u00F3 pode aceitar servi\u00E7os que est\u00E3o em aberto!
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      servico0.setTipo("sZP.Y(6f!^");
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      Especialidade especialidade0 = new Especialidade();
      especialidade0.setNome("sZP.Y(6f!^");
      arrayList0.add(especialidade0);
      fornecedor0.setListaEspecialidades(arrayList0);
      try { 
        servicoService0.setServicoParaFornecedor(servico0, fornecedor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Cliente cliente0 = new Cliente();
      try { 
        servicoService0.setServicoParaFornecedor((Servico) null, cliente0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Apenas fornecedores podem aceitar servi\u00E7os!
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Vector<Servico> vector0 = new Vector<Servico>();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      Endereco endereco0 = new Endereco();
      Servico servico0 = new Servico("SCALAR", "SCALAR", localDate0, localTime0, bigDecimal0, endereco0);
      vector0.add(servico0);
      // Undeclared exception!
      try { 
        servicoService0.setServicosToDAO(vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.dao.ServicoDAO", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      Servico servico0 = new Servico();
      TipoStatus tipoStatus0 = TipoStatus.EM_ABERTO;
      servico0.setStatus(tipoStatus0);
      servico0.setTipo("sZP.Y(6f!^");
      linkedList0.add(servico0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findAll();
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      Especialidade especialidade0 = new Especialidade("sZP.Y(6f!^");
      arrayList0.add(especialidade0);
      fornecedor0.setListaEspecialidades(arrayList0);
      List<Servico> list0 = servicoService0.getServicosDisponiveisFornecedor(fornecedor0);
      assertTrue(list0.contains(servico0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      Servico servico0 = new Servico();
      TipoStatus tipoStatus0 = TipoStatus.ACEITO;
      servico0.setStatus(tipoStatus0);
      servico0.setTipo("sZP.Y(6f!^");
      linkedList0.add(servico0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findAll();
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      Especialidade especialidade0 = new Especialidade("sZP.Y(6f!^");
      arrayList0.add(especialidade0);
      fornecedor0.setListaEspecialidades(arrayList0);
      List<Servico> list0 = servicoService0.getServicosDisponiveisFornecedor(fornecedor0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      Servico servico0 = new Servico();
      servico0.setTipo("sZP.Y(6f!^");
      linkedList0.add(servico0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findAll();
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      Especialidade especialidade0 = new Especialidade("sZP.Y(6f!^");
      arrayList0.add(especialidade0);
      fornecedor0.setListaEspecialidades(arrayList0);
      // Undeclared exception!
      try { 
        servicoService0.getServicosDisponiveisFornecedor(fornecedor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      LinkedList<Servico> linkedList0 = new LinkedList<Servico>();
      Servico servico0 = new Servico();
      linkedList0.add(servico0);
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(servicoRepository0).findAll();
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      Especialidade especialidade0 = new Especialidade("sZP.Y(6fX!A^");
      arrayList0.add(especialidade0);
      servico0.setTipo("oTA0u$&PIKLc");
      fornecedor0.setListaEspecialidades(arrayList0);
      List<Servico> list0 = servicoService0.getServicosDisponiveisFornecedor(fornecedor0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Servico servico0 = new Servico();
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("", "", "", "", "", linkedList0);
      try { 
        servicoService0.criarServico(fornecedor0, servico0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Apenas clientes podem criar servi\u00E7os!
         //
         verifyException("br.com.ufcg.service.ServicoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Servico>) null).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("", "", "", "", "", linkedList0);
      List<Servico> list0 = servicoService0.getServicosEvolvidosFornecedor(fornecedor0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      ArrayList<Servico> arrayList0 = new ArrayList<Servico>();
      List<ServicoDAO> list0 = servicoService0.ordenaServicosPorData(arrayList0);
      assertTrue(list0.isEmpty());
  }
}
