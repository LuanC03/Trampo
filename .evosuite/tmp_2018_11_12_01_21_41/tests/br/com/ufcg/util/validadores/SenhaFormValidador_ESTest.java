/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 03:59:26 GMT 2018
 */

package br.com.ufcg.util.validadores;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.ufcg.domain.Cliente;
import br.com.ufcg.domain.Especialidade;
import br.com.ufcg.domain.Fornecedor;
import br.com.ufcg.domain.vo.NovaSenhaForm;
import br.com.ufcg.util.validadores.SenhaFormValidador;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SenhaFormValidador_ESTest extends SenhaFormValidador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor();
      NovaSenhaForm novaSenhaForm0 = new NovaSenhaForm("<UOcUo}-(z>UbB_!:=", "=KfVNDE:i(@e{^phB!h", "=KfVNDE:i(@e{^phB!h");
      try { 
        SenhaFormValidador.valida(fornecedor0, novaSenhaForm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Cliente cliente0 = new Cliente((String) null, "#d>-c?be", (String) null, (String) null, "#d>-c?be");
      NovaSenhaForm novaSenhaForm0 = new NovaSenhaForm("#d>-c?be", "#d>-c?be", "#d>-c?be");
      novaSenhaForm0.setSenhaNova("#d>-c>be");
      try { 
        SenhaFormValidador.valida(cliente0, novaSenhaForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A nova senha e a confimacao devem ser identicas!
         //
         verifyException("br.com.ufcg.util.validadores.SenhaFormValidador", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("A senha informada esta incorreta!", "A senha informada esta incorreta!", "A senha informada esta incorreta!", "IOIN", "GOIN", linkedList0);
      NovaSenhaForm novaSenhaForm0 = new NovaSenhaForm("IOIN", "A senha informada esta incorreta!", "A senha informada esta incorreta!");
      try { 
        SenhaFormValidador.valida(fornecedor0, novaSenhaForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A senha informada esta incorreta!
         //
         verifyException("br.com.ufcg.util.validadores.SenhaFormValidador", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("<UOcUo}-(z>UbB_!:=", "<UOcUo}-(z>UbB_!:=", ":", "", "<UOcUo}-(z>UbB_!:=", (List<Especialidade>) null);
      NovaSenhaForm novaSenhaForm0 = new NovaSenhaForm("<UOcUo}-(z>UbB_!:=", "=KfVNDE:i(@e{^phB!h", "=KfVNDE:i(@e{^phB!h");
      SenhaFormValidador.valida(fornecedor0, novaSenhaForm0);
      assertEquals("<UOcUo}-(z>UbB_!:=", fornecedor0.getNomeCompleto());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SenhaFormValidador senhaFormValidador0 = new SenhaFormValidador();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Cliente cliente0 = new Cliente((String) null, "#d>-c?be", (String) null, (String) null, "#d>-c?be");
      NovaSenhaForm novaSenhaForm0 = new NovaSenhaForm("#d>-c?be", "#d>-c?be", "#d>-c?be");
      try { 
        SenhaFormValidador.valida(cliente0, novaSenhaForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A nova senha tem que ser diferente da antiga!
         //
         verifyException("br.com.ufcg.util.validadores.SenhaFormValidador", e);
      }
  }
}
