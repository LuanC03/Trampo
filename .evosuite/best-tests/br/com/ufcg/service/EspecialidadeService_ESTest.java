/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 03:51:59 GMT 2018
 */

package br.com.ufcg.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.ufcg.domain.Especialidade;
import br.com.ufcg.repository.EspecialidadeRepository;
import br.com.ufcg.service.EspecialidadeService;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EspecialidadeService_ESTest extends EspecialidadeService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      Especialidade especialidade0 = new Especialidade("{8Bfk-7\"hq9Om(yKx");
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      linkedList0.add(especialidade0);
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(especialidadeRepository0).findAll();
      Especialidade especialidade1 = new Especialidade("{8Bfk-7\"hq9Om(yKx");
      linkedList0.add(especialidade1);
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      List<Especialidade> list0 = especialidadeService0.getEspecialidadesValidas(linkedList0);
      assertTrue(list0.contains(especialidade0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(especialidadeRepository0).findAll();
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Vector<Especialidade> vector0 = new Vector<Especialidade>();
      vector0.add((Especialidade) null);
      // Undeclared exception!
      try { 
        especialidadeService0.getEspecialidadesValidas(vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.EspecialidadeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      Vector<Especialidade> vector0 = new Vector<Especialidade>();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(especialidadeRepository0).findAll();
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      List<Especialidade> list0 = especialidadeService0.getEspecialidades();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      Vector<Especialidade> vector0 = new Vector<Especialidade>();
      Especialidade especialidade0 = new Especialidade("Qi;6:bqZ 08cX%N5)");
      vector0.add(especialidade0);
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null, vector0).when(especialidadeRepository0).findAll();
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      especialidadeService0.getEspecialidades();
      List<Especialidade> list0 = especialidadeService0.getEspecialidades();
      assertTrue(list0.contains(especialidade0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      especialidadeService0.especialidadeRepository = null;
      // Undeclared exception!
      try { 
        especialidadeService0.getNomesEspecialidades();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.EspecialidadeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      EspecialidadeRepository especialidadeRepository1 = especialidadeService0.especialidadeRepository;
      especialidadeService0.especialidadeRepository = especialidadeRepository1;
      especialidadeService0.especialidadeRepository = null;
      // Undeclared exception!
      try { 
        especialidadeService0.getEspecialidades();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.EspecialidadeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      Especialidade especialidade0 = new Especialidade();
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      linkedList0.add(especialidade0);
      Especialidade especialidade1 = new Especialidade("\"");
      linkedList0.add(especialidade1);
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(especialidadeRepository0).findAll();
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      especialidade0.setNome("0jhG~Q`PhKA*5");
      List<Especialidade> list0 = especialidadeService0.getEspecialidadesValidas(linkedList0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      Especialidade especialidade0 = new Especialidade("{UBfk-7Jhq9Om(yKx");
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      linkedList0.add(especialidade0);
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(especialidadeRepository0).findAll();
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      List<String> list0 = especialidadeService0.getNomesEspecialidades();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      Especialidade especialidade0 = new Especialidade("{UBfk-7Jhq9Om(yKx");
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(especialidade0).when(especialidadeRepository0).findByNome(anyString());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      try { 
        especialidadeService0.criarEspecialidade(especialidade0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ja existe uma especialidade com esse nome!
         //
         verifyException("br.com.ufcg.service.EspecialidadeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Especialidade especialidade0 = new Especialidade("");
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Especialidade) null).when(especialidadeRepository0).findByNome(anyString());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      try { 
        especialidadeService0.criarEspecialidade(especialidade0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Insira uma especialidade valida
         //
         verifyException("br.com.ufcg.service.EspecialidadeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Especialidade) null).when(especialidadeRepository0).findByNome(anyString());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Especialidade especialidade0 = new Especialidade(" ");
      try { 
        especialidadeService0.criarEspecialidade(especialidade0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Insira uma especialidade valida
         //
         verifyException("br.com.ufcg.service.EspecialidadeService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(especialidadeRepository0).findAll();
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      List<String> list0 = especialidadeService0.getNomesEspecialidades();
      assertFalse(list0.contains("especialidadeRepository"));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      try { 
        especialidadeService0.criarEspecialidade((Especialidade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.EspecialidadeService", e);
      }
  }
}
