/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 03:57:06 GMT 2018
 */

package br.com.ufcg.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.ufcg.controller.ServicoController;
import br.com.ufcg.dao.ServicoDAO;
import br.com.ufcg.domain.Fornecedor;
import br.com.ufcg.domain.Servico;
import br.com.ufcg.repository.ServicoRepository;
import br.com.ufcg.service.ServicoService;
import br.com.ufcg.util.response.Response;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServicoController_ESTest extends ServicoController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      Long long0 = new Long((-3181L));
      Servico servico0 = mock(Servico.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(servico0).getId();
      Servico servico1 = new Servico();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(servico0, servico1).when(servicoRepository0).findByID(anyLong());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Servico servico2 = servicoService0.getServicoByID((-796L));
      ResponseEntity<Response> responseEntity0 = servicoController0.setServicoParaFornecedor(httpServletRequestWrapper0, servico2);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      Long long0 = new Long(5000L);
      Servico servico0 = mock(Servico.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(servico0).getId();
      Servico servico1 = new Servico();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(servico0, servico1).when(servicoRepository0).findByID(anyLong());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      Servico servico2 = servicoService0.getServicoByID((-2378L));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      ResponseEntity<Response> responseEntity0 = servicoController0.cancelarServicoCliente(httpServletRequest0, servico2);
      assertEquals(400, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = mock(Servico.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null, (Long) null, (Long) null).when(servico0).getId();
      doReturn((ServicoDAO) null).when(servico0).toDAO();
      Stack<Servico> stack0 = new Stack<Servico>();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(servico0).when(servicoRepository0).findByID(anyLong());
      doReturn(stack0).when(servicoRepository0).findServicosCliente(any(br.com.ufcg.domain.Cliente.class));
      doReturn((List) null).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((Locale) null).when(httpServletRequest0).getLocale();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      servicoController0.getServicosFromCliente(httpServletRequestWrapper0);
      Servico servico1 = servicoService0.getServicoByID((-796L));
      httpServletRequestWrapper0.getLocale();
      servico1.toDAO();
      servicoController0.setServicoParaFornecedor(httpServletRequestWrapper0, servico1);
      ResponseEntity<Response> responseEntity0 = servicoController0.setServicoParaFornecedor(httpServletRequestWrapper0, servico1);
      servicoController0.cancelarServicoFornecedor(httpServletRequestWrapper0, servico1);
      servicoController0.concluirServicoFornecedor((HttpServletRequest) null, servico1);
      ResponseEntity<Response> responseEntity1 = servicoController0.historicoServicoFornecedor(httpServletRequestWrapper0);
      assertNotSame(responseEntity1, responseEntity0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      Stack<Servico> stack0 = new Stack<Servico>();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(servicoRepository0).findServicosCliente(any(br.com.ufcg.domain.Cliente.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      Object object0 = new Object();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, object0).when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ResponseEntity<Response> responseEntity0 = servicoController0.getServicosFromCliente(httpServletRequestWrapper0);
      ResponseEntity<Response> responseEntity1 = servicoController0.getServicosFromCliente(httpServletRequestWrapper0);
      assertNotSame(responseEntity1, responseEntity0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      ResponseEntity<Response> responseEntity0 = servicoController0.getServicosDisponiveisForThisFornecedor((HttpServletRequest) null);
      assertEquals(400, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      Stack<Servico> stack0 = new Stack<Servico>();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(servicoRepository0).findAll();
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      stack0.push(servico0);
      ResponseEntity<Response> responseEntity0 = servicoController0.getServicos();
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      Stack<Servico> stack0 = new Stack<Servico>();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      stack0.push(servico0);
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ResponseEntity<Response> responseEntity0 = servicoController0.getServicoFornecedor(httpServletRequestWrapper0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      Long long0 = new Long(0L);
      Servico servico0 = mock(Servico.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(servico0).getId();
      Servico servico1 = new Servico();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(servico0, servico1).when(servicoRepository0).findByID(anyLong());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Servico servico2 = servicoService0.getServicoByID((-2378L));
      ResponseEntity<Response> responseEntity0 = servicoController0.concluirServicoFornecedor(httpServletRequestWrapper0, servico2);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      Long long0 = new Long(1821L);
      Servico servico0 = mock(Servico.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(servico0).getId();
      Stack<Servico> stack0 = new Stack<Servico>();
      Servico servico1 = mock(Servico.class, new ViolatedAssumptionAnswer());
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(servico0, servico1).when(servicoRepository0).findByID(anyLong());
      doReturn(stack0).when(servicoRepository0).findServicosCliente(any(br.com.ufcg.domain.Cliente.class));
      doReturn(stack0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      Object object0 = new Object();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, object0, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      servicoController0.getServicosFromCliente(httpServletRequestWrapper0);
      Servico servico2 = servicoService0.getServicoByID((-796L));
      ResponseEntity<Response> responseEntity0 = servicoController0.setServicoParaFornecedor(httpServletRequestWrapper0, servico2);
      ResponseEntity<Response> responseEntity1 = servicoController0.cancelarServicoFornecedor(httpServletRequestWrapper0, servico2);
      assertNotSame(responseEntity1, responseEntity0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Servico servico0 = new Servico();
      ResponseEntity<Response> responseEntity0 = servicoController0.cadastrarServico(httpServletRequestWrapper0, servico0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servicoController0.historicoServicoCliente(httpServletRequestWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servicoController0.getServicosDisponiveisForThisFornecedor(httpServletRequestWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servicoController0.getServicoFornecedor(httpServletRequestWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      Servico servico0 = new Servico();
      // Undeclared exception!
      try { 
        servicoController0.cadastrarServico(httpServletRequestWrapper0, servico0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      ArrayList<Servico> arrayList0 = new ArrayList<Servico>();
      Servico servico0 = mock(Servico.class, new ViolatedAssumptionAnswer());
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(servicoRepository0).findAll();
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      Fornecedor fornecedor0 = new Fornecedor();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(fornecedor0).when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ResponseEntity<Response> responseEntity0 = servicoController0.getServicosDisponiveisForThisFornecedor(httpServletRequestWrapper0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(servicoRepository0).findServicosCliente(any(br.com.ufcg.domain.Cliente.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ResponseEntity<Response> responseEntity0 = servicoController0.historicoServicoCliente(httpServletRequestWrapper0);
      assertEquals(400, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      Stack<Servico> stack0 = new Stack<Servico>();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(servicoRepository0).findServicosCliente(any(br.com.ufcg.domain.Cliente.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      stack0.push(servico0);
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ResponseEntity<Response> responseEntity0 = servicoController0.historicoServicoCliente(httpServletRequestWrapper0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      Servico servico0 = new Servico();
      Stack<Servico> stack0 = new Stack<Servico>();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(servicoRepository0).findServicosFornecedor(any(br.com.ufcg.domain.Fornecedor.class));
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      stack0.push(servico0);
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ResponseEntity<Response> responseEntity0 = servicoController0.historicoServicoFornecedor(httpServletRequestWrapper0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServicoController servicoController0 = new ServicoController();
      ServicoService servicoService0 = new ServicoService();
      ArrayList<Servico> arrayList0 = new ArrayList<Servico>();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(servicoRepository0).findAll();
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(servicoController0, (Class<?>) ServicoController.class, "servicoService", (Object) servicoService0);
      Injector.validateBean(servicoController0, (Class<?>) ServicoController.class);
      ResponseEntity<Response> responseEntity0 = servicoController0.getServicos();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }
}
