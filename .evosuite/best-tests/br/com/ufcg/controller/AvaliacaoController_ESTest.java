/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 04:04:54 GMT 2018
 */

package br.com.ufcg.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import br.com.ufcg.controller.AvaliacaoController;
import br.com.ufcg.domain.Avaliacao;
import br.com.ufcg.domain.Usuario;
import br.com.ufcg.dto.AvaliacaoDTO;
import br.com.ufcg.service.AvaliacaoService;
import br.com.ufcg.service.ServicoService;
import br.com.ufcg.service.UsuarioService;
import br.com.ufcg.util.response.Response;
import javax.servlet.http.HttpServletRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AvaliacaoController_ESTest extends AvaliacaoController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AvaliacaoController avaliacaoController0 = new AvaliacaoController();
      AvaliacaoService avaliacaoService0 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "avaliacaoService", (Object) avaliacaoService0);
      ServicoService servicoService0 = mock(ServicoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      doReturn((Usuario) null).when(usuarioService0).getByLogin(anyString());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoController0, (Class<?>) AvaliacaoController.class);
      avaliacaoController0.avaliacaoService = null;
      ResponseEntity<Response> responseEntity0 = avaliacaoController0.getAvaliacaoMedia("Upd~j_0i;n+$Q");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AvaliacaoController avaliacaoController0 = new AvaliacaoController();
      AvaliacaoService avaliacaoService0 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "avaliacaoService", (Object) avaliacaoService0);
      ServicoService servicoService0 = mock(ServicoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoController0, (Class<?>) AvaliacaoController.class);
      ResponseEntity<Response> responseEntity0 = avaliacaoController0.avaliarUsuario((HttpServletRequest) null, (AvaliacaoDTO) null);
      assertEquals(400, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AvaliacaoController avaliacaoController0 = new AvaliacaoController();
      AvaliacaoService avaliacaoService0 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(avaliacaoService0).calcularAvaliacaoMedia(any(br.com.ufcg.domain.Usuario.class));
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "avaliacaoService", (Object) avaliacaoService0);
      ServicoService servicoService0 = mock(ServicoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      doReturn((Usuario) null).when(usuarioService0).getByLogin(anyString());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoController0, (Class<?>) AvaliacaoController.class);
      ResponseEntity<Response> responseEntity0 = avaliacaoController0.getAvaliacaoMedia("");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AvaliacaoController avaliacaoController0 = new AvaliacaoController();
      AvaliacaoService avaliacaoService0 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "avaliacaoService", (Object) avaliacaoService0);
      ServicoService servicoService0 = mock(ServicoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoController0, (Class<?>) AvaliacaoController.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoController0, (Class<?>) AvaliacaoController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      AvaliacaoDTO avaliacaoDTO0 = mock(AvaliacaoDTO.class, new ViolatedAssumptionAnswer());
      doReturn((Avaliacao) null).when(avaliacaoDTO0).getAvaliacao();
      ResponseEntity<Response> responseEntity0 = avaliacaoController0.avaliarUsuario(httpServletRequest0, avaliacaoDTO0);
      assertTrue(responseEntity0.hasBody());
  }
}
