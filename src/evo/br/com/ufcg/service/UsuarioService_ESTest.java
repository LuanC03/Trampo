/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 03:32:50 GMT 2018
 */

package br.com.ufcg.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.ufcg.dao.UsuarioDAO;
import br.com.ufcg.domain.Cliente;
import br.com.ufcg.domain.Especialidade;
import br.com.ufcg.domain.Fornecedor;
import br.com.ufcg.domain.Usuario;
import br.com.ufcg.domain.vo.AlterarDadosForm;
import br.com.ufcg.domain.vo.NovaSenhaForm;
import br.com.ufcg.repository.AvaliacaoRepository;
import br.com.ufcg.repository.EspecialidadeRepository;
import br.com.ufcg.repository.ServicoRepository;
import br.com.ufcg.repository.UsuarioRepository;
import br.com.ufcg.service.AvaliacaoService;
import br.com.ufcg.service.EspecialidadeService;
import br.com.ufcg.service.ServicoService;
import br.com.ufcg.service.UsuarioService;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsuarioService_ESTest extends UsuarioService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      AvaliacaoService avaliacaoService0 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      Vector<Usuario> vector0 = new Vector<Usuario>();
      Fornecedor fornecedor0 = new Fornecedor();
      Long long0 = new Long(1172L);
      fornecedor0.setId(long0);
      vector0.add((Usuario) fornecedor0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(usuarioRepository0).findAll();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      List<UsuarioDAO> list0 = usuarioService0.getFornecedores();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      Cliente cliente0 = new Cliente("", "", "", "", "#^osr");
      LinkedList<Usuario> linkedList0 = new LinkedList<Usuario>();
      linkedList0.offerLast(cliente0);
      Long long0 = new Long(2028L);
      cliente0.setId(long0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(usuarioRepository0).findAll();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      List<UsuarioDAO> list0 = usuarioService0.getClientes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      try { 
        usuarioService0.getByLogin("Y*kn!/uj@NmzCW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      AvaliacaoService avaliacaoService0 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Cliente cliente0 = new Cliente();
      try { 
        usuarioService0.criarUsuario(cliente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.util.validadores.UsuarioValidador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Cliente cliente0 = new Cliente("G8;uMHTo^e", "", "p'^T", (String) null, ":)g'\"d4:XN@H:abh");
      try { 
        usuarioService0.criarUsuario(cliente0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O login deve ter no minimo 4 digitos e nao pode conter espaco
         //
         verifyException("br.com.ufcg.util.validadores.UsuarioValidador", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      // Undeclared exception!
      try { 
        usuarioService0.checkUser("`)qCS8/AXB;x/", "142`6OWKo/N/Jr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      try { 
        usuarioService0.atualizarUsuario((Usuario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      try { 
        usuarioService0.atualizarSenha((Usuario) null, "w;x7Z B\bt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      NovaSenhaForm novaSenhaForm0 = new NovaSenhaForm("}ekV8[l<@yB}Uz", "mr.?[Ik.:.0*:%VU8a", "}ekV8[l<@yB}Uz");
      try { 
        usuarioService0.atualizarSenha((Usuario) null, novaSenhaForm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.util.validadores.SenhaFormValidador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      try { 
        usuarioService0.atualizarNome((Usuario) null, "F3e=_dJ6x7Hx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      try { 
        usuarioService0.atualizarNome((Usuario) null, "d");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O nome completo deve ter no minimo 8 digitos
         //
         verifyException("br.com.ufcg.util.validadores.UsuarioValidador", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      try { 
        usuarioService0.atualizarFotoDoPerfil((Usuario) null, "d5N0tqb_B5X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      try { 
        usuarioService0.atualizarDados((Usuario) null, (AlterarDadosForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Vector<Especialidade> vector0 = new Vector<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("ke6as28@J>dAy9X+", "bR:,2&&0ms", "Default value supplier must not be null!", "Default value supplier must not be null!", "s<p", vector0);
      try { 
        usuarioService0.atualizarFotoDoPerfil(fornecedor0, "L,E-$/:6^8AJYqS>` V");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // \u00C9 obrigat\u00F3rio uma foto para o perfil!
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      AvaliacaoService avaliacaoService0 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      Cliente cliente0 = new Cliente();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(cliente0).when(usuarioRepository0).findByLogin(anyString());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Vector<Especialidade> vector0 = new Vector<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("\"", "\"", "\"", "\"", "\"", vector0);
      AlterarDadosForm alterarDadosForm0 = new AlterarDadosForm("\"", " ", "\"", vector0, "\"");
      try { 
        usuarioService0.atualizarDados(fornecedor0, alterarDadosForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Email e/ou login j\u00E1 est\u00E3o sendo usados. Tente outros, por favor.
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      AvaliacaoService avaliacaoService0 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(especialidadeRepository0).findAll();
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Vector<Especialidade> vector0 = new Vector<Especialidade>();
      Fornecedor fornecedor0 = new Fornecedor("Q\"", "Q\"", "Q\"", "Q\"", "Q\"", vector0);
      AlterarDadosForm alterarDadosForm0 = new AlterarDadosForm("Q\"", "Q\"", "Ka'#[nI:k~ ", vector0, "Ka'#[nI:k~ ");
      try { 
        usuarioService0.atualizarDados(fornecedor0, alterarDadosForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Forneca ao menos uma especialidade valida!
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      Fornecedor fornecedor0 = new Fornecedor();
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      AlterarDadosForm alterarDadosForm0 = new AlterarDadosForm((String) null, "containing", "br.com.ufcg.service.UsuarioService", arrayList0, "15)8}MRF<S|8^<+");
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      try { 
        usuarioService0.atualizarDados(fornecedor0, alterarDadosForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Problemas no formulario! Preencha corretamente.
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      LinkedList<Especialidade> linkedList0 = new LinkedList<Especialidade>();
      AlterarDadosForm alterarDadosForm0 = new AlterarDadosForm("1Ey", (String) null, "1Ey", linkedList0, "1Ey");
      try { 
        usuarioService0.atualizarDados((Usuario) null, alterarDadosForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Problemas no formulario! Preencha corretamente.
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      Cliente cliente0 = new Cliente();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      ArrayList<Especialidade> arrayList0 = new ArrayList<Especialidade>();
      AlterarDadosForm alterarDadosForm0 = new AlterarDadosForm((String) null, "A1+:<j@EOB.", (String) null, arrayList0, "A1+:<j@EOB.");
      try { 
        usuarioService0.atualizarDados(cliente0, alterarDadosForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Problemas no formulario! Preencha corretamente.
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      NovaSenhaForm novaSenhaForm0 = new NovaSenhaForm((String) null, "br.com.ufcg.service.AvaliacaoService", "br.com.ufcg.service.AvaliacaoService");
      try { 
        usuarioService0.atualizarSenha((Usuario) fornecedor0, novaSenhaForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Preencha todos os campos!
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      NovaSenhaForm novaSenhaForm0 = new NovaSenhaForm("br.com.ufcg.service.UsuarioService", "_5~UmuS", (String) null);
      try { 
        usuarioService0.atualizarSenha((Usuario) null, novaSenhaForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Preencha todos os campos!
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      Cliente cliente0 = new Cliente();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      NovaSenhaForm novaSenhaForm0 = new NovaSenhaForm();
      try { 
        usuarioService0.atualizarSenha((Usuario) cliente0, novaSenhaForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Preencha todos os campos!
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      try { 
        usuarioService0.atualizarFotoDoPerfil((Usuario) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // \u00C9 obrigat\u00F3rio uma foto para o perfil!
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      AvaliacaoService avaliacaoService0 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      Vector<Usuario> vector0 = new Vector<Usuario>();
      Fornecedor fornecedor0 = new Fornecedor();
      vector0.add((Usuario) fornecedor0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(usuarioRepository0).findAll();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      // Undeclared exception!
      try { 
        usuarioService0.getFornecedores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.dao.FornecedorDAO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      AvaliacaoService avaliacaoService1 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService1);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Usuario) null).when(usuarioRepository0).findByLoginAndSenha(anyString() , anyString());
      doReturn((List) null).when(usuarioRepository0).findAll();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      UsuarioService usuarioService1 = avaliacaoService0.usuarioService;
      usuarioService1.checkUser(" ", "");
      // Undeclared exception!
      try { 
        usuarioService1.getClientes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      Cliente cliente0 = new Cliente("", "", "", "", "E^");
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(cliente0).when(usuarioRepository0).findByLoginAndSenha(anyString() , anyString());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      boolean boolean0 = usuarioService0.checkUser("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Usuario) null).when(usuarioRepository0).findByLogin(anyString());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      try { 
        usuarioService0.getByLogin("WRITE_DATES_WITH_ZONE_ID");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Usuario nao encontrado
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = new UsuarioService();
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      Fornecedor fornecedor0 = new Fornecedor();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(fornecedor0).when(usuarioRepository0).findByLogin(anyString());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Usuario usuario0 = usuarioService0.getByLogin("r.com.ufcg.domain.Usuario");
      assertNull(usuario0.getFotoPerfil());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      AvaliacaoService avaliacaoService0 = mock(AvaliacaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      Fornecedor fornecedor0 = new Fornecedor("problemas ao cadastrar usuario! campos invalidos!", "problemas ao cadastrar usuario! campos invalidos!", "problemas ao cadastrar usuario! campos invalidos!", "problemas ao cadastrar usuario! campos invalidos!", "{k^fnat_", (List<Especialidade>) null);
      try { 
        usuarioService0.atualizarSenha((Usuario) fornecedor0, "{k^fnat_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A nova senha tem que ser diferente do antigo!
         //
         verifyException("br.com.ufcg.service.UsuarioService", e);
      }
  }
}
