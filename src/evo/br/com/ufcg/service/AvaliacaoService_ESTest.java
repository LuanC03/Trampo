/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 12 03:49:06 GMT 2018
 */

package br.com.ufcg.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.com.ufcg.domain.Avaliacao;
import br.com.ufcg.domain.Cliente;
import br.com.ufcg.domain.Fornecedor;
import br.com.ufcg.domain.Servico;
import br.com.ufcg.domain.Usuario;
import br.com.ufcg.domain.enums.TipoUsuario;
import br.com.ufcg.dto.AvaliacaoDTO;
import br.com.ufcg.repository.AvaliacaoRepository;
import br.com.ufcg.repository.EspecialidadeRepository;
import br.com.ufcg.repository.ServicoRepository;
import br.com.ufcg.repository.UsuarioRepository;
import br.com.ufcg.service.AvaliacaoService;
import br.com.ufcg.service.EspecialidadeService;
import br.com.ufcg.service.ServicoService;
import br.com.ufcg.service.UsuarioService;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AvaliacaoService_ESTest extends AvaliacaoService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Cliente cliente0 = new Cliente("%5u,>Yo4 N<}DE", "%5u,>Yo4 N<}DE", "%5u,>Yo4 N<}DE", "%5u,>Yo4 N<}DE", "");
      Double double0 = new Double(1.0);
      Avaliacao avaliacao0 = new Avaliacao(double0);
      cliente0.addAvaliacao(avaliacao0);
      cliente0.addAvaliacao(avaliacao0);
      Double double1 = avaliacaoService0.calcularAvaliacaoMedia((Usuario) cliente0);
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = mock(ServicoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      fornecedor0.setAvaliacoes((List<Avaliacao>) null);
      List<Avaliacao> list0 = avaliacaoService0.getAvaliacoes(fornecedor0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      Avaliacao avaliacao0 = new Avaliacao();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(avaliacao0).when(avaliacaoRepository0).find(anyLong());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Long long0 = new Long((-25L));
      Avaliacao avaliacao1 = avaliacaoService0.getAvaliacao(long0);
      assertNull(avaliacao1.getNota());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Cliente cliente0 = new Cliente("", "", "", "uW+\"?y", "");
      Double double0 = new Double(1.0);
      Avaliacao avaliacao0 = new Avaliacao(double0);
      cliente0.addAvaliacao(avaliacao0);
      List<Avaliacao> list0 = avaliacaoService0.getAvaliacoes(cliente0);
      Double double1 = avaliacaoService0.calcularAvaliacaoMedia(list0);
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      Avaliacao avaliacao0 = new Avaliacao();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Cliente cliente0 = new Cliente("", "", (String) null, "uW+\"?y", "");
      Double double0 = Double.valueOf((-232.32811));
      avaliacao0.setNota(double0);
      cliente0.addAvaliacao(avaliacao0);
      Double double1 = avaliacaoService0.calcularAvaliacaoMedia((Usuario) cliente0);
      assertEquals((-232.32811), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Cliente cliente0 = new Cliente("", "", "", "^+?", "");
      Double double0 = new Double(1.0);
      Avaliacao avaliacao0 = new Avaliacao(double0);
      cliente0.addAvaliacao(avaliacao0);
      Double double1 = new Double(0.0);
      avaliacao0.setNota(double1);
      Double double2 = avaliacaoService0.calcularAvaliacaoMedia((Usuario) cliente0);
      assertEquals(0.0, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Cliente cliente0 = new Cliente("", "", (String) null, "uW+\"?y", "");
      Double double0 = new Double(1.0);
      Avaliacao avaliacao0 = new Avaliacao(double0);
      cliente0.addAvaliacao(avaliacao0);
      Double double1 = new Double(2697.977836043);
      avaliacao0.setNota(double1);
      Double double2 = avaliacaoService0.calcularAvaliacaoMedia((Usuario) cliente0);
      assertEquals(2697.977836043, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = mock(ServicoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Servico servico0 = new Servico();
      TipoUsuario tipoUsuario0 = TipoUsuario.CLIENTE;
      try { 
        avaliacaoService0.servicoEhValidoParaAvaliar(servico0, tipoUsuario0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      // Undeclared exception!
      try { 
        avaliacaoService0.getAvaliacoes((Usuario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      // Undeclared exception!
      try { 
        avaliacaoService0.getAvaliacao((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      try { 
        avaliacaoService0.calcularAvaliacaoMedia((Usuario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Double double0 = new Double((-453.8852759406));
      Avaliacao avaliacao0 = new Avaliacao(double0);
      try { 
        avaliacaoService0.addAvaliacao((Usuario) null, avaliacao0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A nota tem que ser entre 0 e 5!
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Avaliacao avaliacao0 = new Avaliacao();
      try { 
        avaliacaoService0.addAvaliacao(avaliacao0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      LinkedList<Avaliacao> linkedList0 = new LinkedList<Avaliacao>();
      try { 
        avaliacaoService0.calcularAvaliacaoMedia((List<Avaliacao>) linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O usu\u00E1rio nunca foi avaliado!
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = mock(ServicoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      Double double0 = new Double(0.0);
      List<Avaliacao> list0 = avaliacaoService0.getAvaliacoes(fornecedor0);
      Avaliacao avaliacao0 = new Avaliacao(double0);
      fornecedor0.addAvaliacao(avaliacao0);
      Double double1 = avaliacaoService0.calcularAvaliacaoMedia(list0);
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsuarioService usuarioService0 = new UsuarioService();
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "avaliacaoService", (Object) avaliacaoService0);
      EspecialidadeService especialidadeService0 = new EspecialidadeService();
      EspecialidadeRepository especialidadeRepository0 = mock(EspecialidadeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(especialidadeService0, (Class<?>) EspecialidadeService.class, "especialidadeRepository", (Object) especialidadeRepository0);
      Injector.validateBean(especialidadeService0, (Class<?>) EspecialidadeService.class);
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "especialidadeService", (Object) especialidadeService0);
      Cliente cliente0 = new Cliente();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(usuarioService0, (Class<?>) UsuarioService.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(usuarioService0, (Class<?>) UsuarioService.class);
      AvaliacaoDTO avaliacaoDTO0 = new AvaliacaoDTO();
      try { 
        avaliacaoService0.avaliarUsuario(cliente0, avaliacaoDTO0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = mock(ServicoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Fornecedor fornecedor0 = new Fornecedor();
      AvaliacaoDTO avaliacaoDTO0 = new AvaliacaoDTO();
      try { 
        avaliacaoService0.avaliarUsuario(fornecedor0, avaliacaoDTO0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Double double0 = new Double(2035.667217593);
      Avaliacao avaliacao0 = new Avaliacao(double0);
      try { 
        avaliacaoService0.addAvaliacao(avaliacao0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A nota tem que ser entre 0 e 5!
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = mock(ServicoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Double double0 = new Double((-1415.60750538292));
      Avaliacao avaliacao0 = new Avaliacao(double0);
      try { 
        avaliacaoService0.addAvaliacao(avaliacao0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A nota tem que ser entre 0 e 5!
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Avaliacao) null).when(avaliacaoRepository0).find(anyLong());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Avaliacao avaliacao0 = avaliacaoService0.getAvaliacao((Long) null);
      assertNull(avaliacao0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ServicoService servicoService0 = new ServicoService();
      ServicoRepository servicoRepository0 = mock(ServicoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(servicoService0, (Class<?>) ServicoService.class, "servicoRepository", (Object) servicoRepository0);
      Injector.validateBean(servicoService0, (Class<?>) ServicoService.class);
      AvaliacaoService avaliacaoService0 = new AvaliacaoService();
      AvaliacaoRepository avaliacaoRepository0 = mock(AvaliacaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "avaliacaoRepository", (Object) avaliacaoRepository0);
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "servicoService", (Object) servicoService0);
      UsuarioService usuarioService0 = mock(UsuarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(avaliacaoService0, (Class<?>) AvaliacaoService.class, "usuarioService", (Object) usuarioService0);
      Injector.validateBean(avaliacaoService0, (Class<?>) AvaliacaoService.class);
      Cliente cliente0 = new Cliente((String) null, "GliQ}&2d4UfL(yB#", "br.com.ufcg.service.AvaliacaoService", "A nota tem que ser entre 0 e 5!", "GenericPropertyMatcher must not be empty!");
      try { 
        avaliacaoService0.calcularAvaliacaoMedia((Usuario) cliente0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O usu\u00E1rio nunca foi avaliado!
         //
         verifyException("br.com.ufcg.service.AvaliacaoService", e);
      }
  }
}
